<?xml version="1.0" encoding="utf-8"?>

<!-- Permission is granted to copy, distribute and/or modify this document -->
<!-- under the terms of the GNU Free Documentation License, Version 1.3 or -->
<!-- any later version published by the Free Software Foundation; with the -->
<!-- Invariant Sections being ``GNU General Public License'', with the -->
<!-- Front-Cover Texts being ``A GNU Manual'', and with the Back-Cover Texts -->
<!-- as in (a) below.  A copy of the license is included in the section -->
<!-- entitled ``GNU Free Documentation License''. -->
<!--  -->
<!-- (a) The FSF's Back-Cover Text is: ``You have the freedom to -->
<!-- copy and modify this GNU manual.  Buying copies from the FSF -->
<!-- supports it in developing GNU and promoting software freedom.'' -->

<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
  <title>The application context</title>
  <para>
    Making Advanced Gtk+ Sequencer objects reachable from different contices was
    mandatory as introducing AgsApplicationContext. Imagine you are within a GUI
    callback and want to lookup a soundcard or sequencer the application context
    shall provide this functioanlity and provide access to its objects through a
    well defined interface. As doing it with interfaces you are not limited to one
    specific implementation rather having the option to choose the appropriate one
    implementing the interfaces.
  </para>
  <para>
    There are different contices available e.g. AgsThreadApplicationContext providing
    its functionality by AgsConcurrencyProvider, AgsAudioApplicationContext giving
    you the wished objects by implementing AgsConcurrencyProvider and AgsSoundProvider.
    For example the code below should each giving you the same meaning object but
    using different contices.
  </para>
  
  <sect1>
    <title>Implementations and their interfaces</title>
    <para>
      Creating a AgsThreadApplicationContext and then get the task thread by calling
      ags_concurrency_provider_get_task_thread(). Since the AgsConcurrency interface
      is implemented by the context, we retrieve the the task thread. The AgsTaskThread
      gives you a thread safe signal. It is used to launch AgsTask objects to do thread
      safe operations but later on this.
    </para>
    
    <example>
      <title>Thread application context</title>
      <programlisting language="C">
<xi:include href="../listings/thread_application_context.c" parse="text" />
      </programlisting>
    </example>

    <para>
      The AgsAudioApplicationContext inherites from AgsApplicationContext and implements
      the AgsConcurrency interface, too. So you can retrieve the task thread the same
      way. But the context implements one more, the AgsSoundProvider interface. Giving
      you objects related to threading and audio processing.
    </para>
    
    <example>
      <title>Audio application context</title>
      <programlisting language="C">
<xi:include href="../listings/audio_application_context.c" parse="text" />
      </programlisting>
    </example>
  </sect1>

  <sect1>
    <title>The config property</title>
    <para>
      The AgsApplicationContext base class provides you an AgsConfig instance. It might
      load a default configuration or from current users home directory. The config should
      be obtained as property using g_object_get() or similar.
    </para>
    
    <para>
      AgsConfig stores its properties as key value pairs within appropriate group. In order
      to get the config instance, load default configuration and get the threading model do
      the following.
    </para>
    
    <example>
      <title>Get config value</title>
      <programlisting language="C">
<xi:include href="../listings/config.c" parse="text" />
      </programlisting>
    </example>
  </sect1>

  <sect1>
    <title>The file property</title>
    <para>
      You might want to set an AgsFile instance within your application context. This in
      view of having your application persisted.
    </para>

    <example>
      <title>The application context :file property</title>
      <programlisting language="C">
<xi:include href="../listings/file_property.c" parse="text" />
      </programlisting>
    </example>
  </sect1>

  <sect1>
    <title>The application mutex</title>
    <para>
      The probably most important property is :application-mutex. You should get it and copy
      to your very own toplevel object. Since all access to AgsApplicationContext should be
      protected by the mutex of concurrent access. This property is provided by AgsMutexManager,
      too.
    </para>

    <example>
      <title>The application mutex</title>
      <programlisting language="C">
<xi:include href="../listings/application_mutex.c" parse="text" />
      </programlisting>
    </example>
  </sect1>

</chapter>
